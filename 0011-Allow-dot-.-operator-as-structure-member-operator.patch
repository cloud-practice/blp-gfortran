From 183f4567c901b5a379cf12311b95559f3b4b298b Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Thu, 4 Feb 2016 16:13:03 +0000
Subject: [PATCH 11/46]  Allow dot ('.') operator as structure member operator.

 This is necessary to parse older STRUCTURE/RECORD syntax but introduces
 parsing problems with operator names. Allowing this means the names of
 intrinsic operators ('.eq.' etc) can not be used in structures. User
 defined types in f90 and later may show a different error message to before.

 This requres '-std=extra-legacy' since this behaviour may break some corner
 cases in existing code (for example, derived types in which 'eq' is actually
 the name of a field)
---
 gcc/fortran/matchexp.c | 12 +++++++-----
 gcc/fortran/primary.c  | 24 +++++++++++++++++++++++-
 2 files changed, 30 insertions(+), 6 deletions(-)

diff --git a/gcc/fortran/matchexp.c b/gcc/fortran/matchexp.c
index 4643281..ab09f48 100644
--- a/gcc/fortran/matchexp.c
+++ b/gcc/fortran/matchexp.c
@@ -32,14 +32,16 @@ static char expression_syntax[] = N_("Syntax error in expression at %C");
    few restrictions.  The error_flag controls whether an error is
    raised if 'true' or 'false' are used or not.  */
 
+extern const char* const badops[];
+
+const char * const badops[] = {
+  "and", "or", "not", "eqv", "neqv", "eq", "ne", "ge", "le", "lt", "gt",
+  NULL
+};
+
 match
 gfc_match_defined_op_name (char *result, int error_flag)
 {
-  static const char * const badops[] = {
-    "and", "or", "not", "eqv", "neqv", "eq", "ne", "ge", "le", "lt", "gt",
-      NULL
-  };
-
   char name[GFC_MAX_SYMBOL_LEN + 1];
   locus old_loc;
   match m;
diff --git a/gcc/fortran/primary.c b/gcc/fortran/primary.c
index a94ae21..8f03464 100644
--- a/gcc/fortran/primary.c
+++ b/gcc/fortran/primary.c
@@ -30,6 +30,9 @@ along with GCC; see the file COPYING3.  If not see
 
 int matching_actual_arglist = 0;
 
+/* A list of intrinsic operation names from matchexp.c */
+extern const char* const badops[];
+
 /* Matches a kind-parameter expression, which is either a named
    symbolic constant or a nonnegative integer constant.  If
    successful, sets the kind value to the correct integer.
@@ -1827,6 +1830,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
   gfc_symbol *sym = primary->symtree->n.sym;
   match m;
   bool unknown;
+  locus old_locus;
 
   tail = NULL;
 
@@ -1924,8 +1928,10 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
       return MATCH_ERROR;
     }
 
+  old_locus = gfc_current_locus;
+
   if ((sym->ts.type != BT_DERIVED && sym->ts.type != BT_CLASS)
-      || gfc_match_char ('%') != MATCH_YES)
+      || !(gfc_match_char ('%') == MATCH_YES || (gfc_option.allow_std & GFC_STD_EXTRA_LEGACY && gfc_match_char ('.') == MATCH_YES) ))
     goto check_substring;
 
   sym = sym->ts.u.derived;
@@ -1934,6 +1940,7 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
     {
       gfc_try t;
       gfc_symtree *tbp;
+      int is_operation_name = 0;
 
       m = gfc_match_name (name);
       if (m == MATCH_NO)
@@ -1994,6 +2001,21 @@ gfc_match_varspec (gfc_expr *primary, int equiv_flag, bool sub_flag,
 	  break;
 	}
 
+      /* If this is a reserved name, we should reject this and continue parsing */
+      for (int i=0; badops[i] != NULL; i++)
+        {
+          if (strcmp (name, badops[i])==0)
+            {
+              is_operation_name = 1; break;
+            }
+        }
+
+      if (is_operation_name || gfc_find_uop (name, NULL))
+        {
+          gfc_current_locus = old_locus;
+          break; /* Equivalent to jumping to check_substring */
+        }
+
       component = gfc_find_component (sym, name, false, false);
       if (component == NULL)
 	return MATCH_ERROR;
-- 
1.9.1

