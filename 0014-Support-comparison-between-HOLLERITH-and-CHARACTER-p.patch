From dab31f9fc783ffb480f97b24d003062b7abcb02e Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Thu, 4 Feb 2016 17:18:30 +0000
Subject: [PATCH 14/46] Support comparison between HOLLERITH and CHARACTER plus
 test case

---
 gcc/fortran/resolve.c                              | 40 ++++++++++++++++++++++
 .../gfortran.dg/hollerith-character-comparison.f90 | 15 ++++++++
 2 files changed, 55 insertions(+)
 create mode 100644 gcc/testsuite/gfortran.dg/hollerith-character-comparison.f90

diff --git a/gcc/fortran/resolve.c b/gcc/fortran/resolve.c
index b50fd38..7dbec16 100644
--- a/gcc/fortran/resolve.c
+++ b/gcc/fortran/resolve.c
@@ -3889,6 +3889,11 @@ compare_shapes (gfc_expr *op1, gfc_expr *op2)
   return t;
 }
 
+static int
+is_character_based (bt type)
+{
+  return type == BT_CHARACTER || type == BT_HOLLERITH;
+}
 
 /* Resolve an operator expression node.  This can involve replacing the
    operation with a user defined function call.  */
@@ -4033,6 +4038,22 @@ resolve_operator (gfc_expr *e)
     case INTRINSIC_EQ_OS:
     case INTRINSIC_NE:
     case INTRINSIC_NE_OS:
+
+      /* If you're comparing hollerith contants to character expresisons, convert the hollerith
+	 constant */
+      if (gfc_option.allow_std & GFC_STD_EXTRA_LEGACY && is_character_based(op1->ts.type) && is_character_based(op2->ts.type))
+	{
+	  gfc_typespec ts;
+	  ts.type = BT_CHARACTER;
+	  ts.kind = op1->ts.kind;
+	  if (op1->ts.type == BT_HOLLERITH)
+	    gfc_convert_type_warn (op1, &ts, 2, 1);
+	  ts.type = BT_CHARACTER;
+	  ts.kind = op2->ts.kind;
+	  if (op2->ts.type == BT_HOLLERITH)
+	    gfc_convert_type_warn (op2, &ts, 2, 1);
+	}
+
       if (op1->ts.type == BT_CHARACTER && op2->ts.type == BT_CHARACTER
 	  && op1->ts.kind == op2->ts.kind)
 	{
@@ -4041,6 +4062,25 @@ resolve_operator (gfc_expr *e)
 	  break;
 	}
 
+
+      if(gfc_option.allow_std & GFC_STD_EXTRA_LEGACY && gfc_numeric_ts(&op1->ts) && op2->ts.type == BT_HOLLERITH)
+	{
+	  gfc_warning("Promoting argument for comparison from HOLLERITH to INTEGER at %L", &op2->where);
+	  gfc_typespec ts;
+	  ts.type = BT_INTEGER;
+	  ts.kind = 4;
+	  gfc_convert_type_warn (op2, &ts, 2, 1);
+	}
+
+      if(gfc_option.allow_std & GFC_STD_EXTRA_LEGACY && gfc_numeric_ts(&op2->ts) && op1->ts.type == BT_HOLLERITH)
+	{
+	  gfc_warning("Promoting argument for comparison from HOLLERITH to INTEGER at %L", &op1->where);
+	  gfc_typespec ts;
+	  ts.type = BT_INTEGER;
+	  ts.kind = 4;
+	  gfc_convert_type_warn (op1, &ts, 2, 1);
+	}
+
       if (gfc_numeric_ts (&op1->ts) && gfc_numeric_ts (&op2->ts))
 	{
 	  gfc_type_convert_binary (e, 1);
diff --git a/gcc/testsuite/gfortran.dg/hollerith-character-comparison.f90 b/gcc/testsuite/gfortran.dg/hollerith-character-comparison.f90
new file mode 100644
index 0000000..e618cbb
--- /dev/null
+++ b/gcc/testsuite/gfortran.dg/hollerith-character-comparison.f90
@@ -0,0 +1,15 @@
+       ! { dg-options "-std=extra-legacy" }
+
+      program convert
+      REAL*4 a
+      INTEGER*4 b
+      b = 1000
+      print *, 4HJMAC.eq.4HJMAC ! { dg-warning "Legacy Extension: Hollerith constant|Conversion from HOLLERITH" }
+      print *, 4HJMAC.eq."JMAC" ! { dg-warning "Legacy Extension: Hollerith constant|Conversion from HOLLERITH" }
+      print *, 4HJMAC.eq."JMAN" ! { dg-warning "Legacy Extension: Hollerith constant|Conversion from HOLLERITH" }
+      print *, "JMAC".eq.4HJMAN !  { dg-warning "Legacy Extension: Hollerith constant|Conversion from HOLLERITH" }
+      print *, "AAAA".eq.5HAAAAA ! { dg-warning "Legacy Extension: Hollerith constant|Conversion from HOLLERITH" }
+      print *, "BBBBB".eq.5HBBBB ! { dg-warning "Legacy Extension: Hollerith constant|Conversion from HOLLERITH" }
+
+      end program
+
-- 
1.9.1

