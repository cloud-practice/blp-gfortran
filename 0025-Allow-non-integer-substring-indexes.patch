From 4af567221a8510c826edf233e044fbf07f249296 Mon Sep 17 00:00:00 2001
From: Jim MacArthur <jim.macarthur@codethink.co.uk>
Date: Mon, 5 Oct 2015 14:05:03 +0100
Subject: [PATCH 25/46] Allow non-integer substring indexes

---
 gcc/fortran/resolve.c | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)

diff --git a/gcc/fortran/resolve.c b/gcc/fortran/resolve.c
index 7dbec16..0cc17c7 100644
--- a/gcc/fortran/resolve.c
+++ b/gcc/fortran/resolve.c
@@ -4913,6 +4913,17 @@ resolve_substring (gfc_ref *ref)
       if (gfc_resolve_expr (ref->u.ss.start) == FAILURE)
 	return FAILURE;
 
+      /* In legacy mode, allow non-integer string indexes by converting */
+      if (ref->u.ss.start->ts.type != BT_INTEGER &&
+	  gfc_numeric_ts (&ref->u.ss.start->ts) &&
+	  gfc_option.allow_std & GFC_STD_EXTRA_LEGACY)
+	{
+	  gfc_typespec t;
+	  t.type = BT_INTEGER;
+	  t.kind = ref->u.ss.start->ts.kind;
+	  gfc_convert_type_warn (ref->u.ss.start, &t, 2, 1);
+	}
+
       if (ref->u.ss.start->ts.type != BT_INTEGER)
 	{
 	  gfc_error ("Substring start index at %L must be of type INTEGER",
@@ -4942,6 +4953,17 @@ resolve_substring (gfc_ref *ref)
       if (gfc_resolve_expr (ref->u.ss.end) == FAILURE)
 	return FAILURE;
 
+      /* Non-integer string index endings, as for start */
+      if (ref->u.ss.end->ts.type != BT_INTEGER &&
+	  gfc_numeric_ts (&ref->u.ss.end->ts) &&
+	  gfc_option.allow_std & GFC_STD_EXTRA_LEGACY)
+	{
+	  gfc_typespec t;
+	  t.type = BT_INTEGER;
+	  t.kind = ref->u.ss.end->ts.kind;
+	  gfc_convert_type_warn (ref->u.ss.end, &t, 2, 1);
+	}
+
       if (ref->u.ss.end->ts.type != BT_INTEGER)
 	{
 	  gfc_error ("Substring end index at %L must be of type INTEGER",
-- 
1.9.1

